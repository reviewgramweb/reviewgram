from language import Language
from pythonautocompleter import PythonAutocompleter
from pythonsyntaxchecker import PythonSyntaxChecker
 
# Абстрактный класс языка для работы с ними
class PythonLanguage(Language): 
    def __init__(self):
        self.autocompleter = PythonAutocompleter()
        self.syntaxChecker = PythonSyntaxChecker()
        keywords = [
            ["False",	"false	pause"],						
            ["await",	"the way",	"wait out"],						
            ["else",	"elsa"],							
            ["import",	"input",	"importance",	"+registry",	"+first"],
            ["None",	"none",	"known"],
            ["break",	"Break",	"+registry"],	
            ["break",	"drake"],
            ["except",	"upset"],
            ["in",	"in keyword",	"in keywords",	"in key word",	"in key west"],
            ["raise",	"rise"],
            ["True",	"through",	"true",	"future"],
            ["return",	"returned"],
            ["and",	"and keyword",	"and keywords",	"and keyboard",	"and key west"],
            ["for",	"4 keyword", "4 keywordы", "4keyword",	"4keywords",	"for keyword",	"for keywords",	"for key west"],
            ["lambda",	"lomza",	"lambda"],
            ["try",	"troy"],
            ["as",	"ave",	"ass",	"OS",	"a s"],
            ["def",	"death",	"define",	"definition", "+first"],
            ["from",	"From"],
            ["nonlocal",	"non-local",	"9 local",	"9 logo"],
            ["while",	"I'll",	"wow"],
            ["assert",	"assault"],
            ["del",	"jail",	"zelle",	"jealous"],
            ["global",	"Global", "+registry"],
            ["not",	"Not", "+registry"],
            ["with",	"width"],
            ["elif",	"else if"],
            ["if",	"i f"],
            ["or",	"or keyword"],
            ["yield",	"Yield", "+registry"]
        ]
        common = [
            ["/",	"slash"],								
            ["\\",	"backslash"],								
            ["\"",	"quote",	"gold",	"court"],						
            ["\'",	"single quote",	"single quotes",	"single proton"],						
            ["#",	"hash"],								
            ["[",	"left square bracket"],								
            ["]",	"right square bracket"],								
            ["{",	"left brace",	"left brain"],							
            ["}",	"right brace",	"right brain"],							
            [";",	"semicolon",	"jamie cullum"],							
            [":",	"colon",	"call him"],							
            [".",	"dot"],								
            [",",	"comma"],								
            ["+",	"plus"],								
            ["-",	"minus"],								
            ["*",	"multiply"],								
            ["*",	"X",						"+registry"],		
            ["^",	"caret",	"carrots",	"carry",	"carried"],					
            ["%",	"modulus",	"modules",	"model is"],						
            ["**",	"exponentiation"],								
            ["//",	"floor division",	"for our division"],							
            ["@",	"at sign"],								
            ["<<",	"shift left",	"just left"],							
            [">>",	"shift right",	"shift right"],							
            ["&",	"bitwise and",	"beach wise and",	"bitwise end",	"beach wise end",	"wyzant"],				
            ["|",	"vertical bar",	"horizontal wave",	"where is on the wave"],						
            [":=",	"colon assign",	"all of the sign",	": assign",	": inside"],					
            [">",	"greater"],								
            ["<",	"lesser"],								
            ["<=",	"lesser or equal",	"less or equal"],							
            [">=",	"greater or equal"],								
            ["==",	"equal"],								
            ["!=",	"not equal"],								
            ["(",	"opening round bracket",	"opening round brackets"],							
            [")",	"closing round bracket",	"closing round brackets"],							
            ["->",	"arrow"],								
            ["+=",	"plus equal"],								
            ["-=",	"minus equal"],								
            ["*=",	"multiply equal"],								
            ["*=",	"X equal",						"+registry"],		
            ["/=",	"divide equal",	"divided equal",	"division equal"],						
            ["//=",	"double slash equal",	"double/equal",	"cc equal"],						
            ["**=",	"double star equal",	"devil star evil",	"devil star equal"],						
            ["&=",	"and equal",	"an equal"],							
            ["|=",	"or equal",	"glory"],							
            ["%=",	"percent sign equal",	"% evil"],							
            ["@=",	"at sign equal",	"@equal",	"that sign equal",	"at signing for"],					
            [">>=",	"shift right equal",	"just right equal",	"shift right evil",	"just right evil"],					
            ["<<=",	"shift left equal",	"just left equal",	"shift left evil",	"just left evil"],					
            ["^=",	"exclusive or equal",	"exclusive voorheesville"],							
            ["$",	"dollar sign"],								
            ["?",	"question mark"],								
            ["`",	"grave accent",	"gravis",	"graphics and"],						
            ["0",	"zero",								"+no_space"],
            ["1",	"one",								"+no_space"],
            ["2",	"two",								"+no_space"],
            ["3",	"three",								"+no_space"],
            ["4",	"four",								"+no_space"],
            ["5",	"five",								"+no_space"],
            ["6",	"six",								"+no_space"],
            ["7",	"seven",								"+no_space"],
            ["8",	"eight",								"+no_space"],
            ["9",	"nine",								"+no_space"],
            ["_"	"underscore"],								
            ["\t",	"tab",	"temp",	"tabs"],						
            [" ",	"space",	"bass"],
            ["master",	"Master",								"+registry"],
            ["slave",	"Slave",								"+registry"],
            ["frontend",	"front-end"],								
            ["backend",	"back-end"]								
        ]

        modules = [
            ["shutil","shell utilities","+registry"],
            ["shutil","show me Chili's","+registry"],
            ["unittest","unit test","+registry"],
            ["subprocess","subtract mixed","+registry"],
            ["fractions","Fractions","+registry"],
            ["cmath","sea math","sea mess","CMOS","ST Math","+registry"],
            ["glob","global find","global fight","global fine","global fine"],
            ["copy","Copy","+registry"],
            ["functions","function","+registry"],
            ["os","operation system","horse"],
            ["os.path","operation system path","operation system bass","horse path","horse bass"],
            ["json","Json","+registry"],
            ["calendar","Calendar","+registry"],
            ["pickle","Pickle","+registry"],
            ["datetime","date-time","daytime"],
            ["bisect","Bisect","+registry"],
            ["collections","Collections","+registry"],
            ["array","are","every"],
            ["itertools","iteration tools","+registry"],
            ["time","Time","+registry"],
            ["sys","system","seas"],
            ["random","ran and","+registry"],
            ["math","mess","+registry"],
            ["atexit","at exit","+registry"],
            ["gc","garbage collection","+registry"],
            ["inspect","Inspect","+registry"],
            ["marshal","marshall","+registry"],
            ["traceback","trace back","chase back"],
            ["types","tight","+registry"],
            ["warnings","warninks","+registry"],
            ["weakref","weak references","week references"],
            ["future_builtins","future built-ins","future buildings"],
            ["pdb","program debug","randy bug"],
            ["doctest","documentation test","documentation text"],
            ["decimal","Decimal","+registry"],
            ["numbers","Numbers","+registry"],
            ["abc","a b c","+registry"],
            ["abc","ABC","+registry"],
            ["contextlib","context library","+registry"],
            ["functools","functional tools","+registry"],
            ["heapq","heap queue","heap fewer","hip queue","heap queue"],
            ["heapq","EQ","+registry"],
            ["operator","Operator","+registry"],
            ["codecs","codex","+registry"],
            ["re","regular expression","+registry"],
            ["string","String","+registry"],
            ["struct","structure","+registry"],
            ["unicodedata","unicode data","unico data"],
            ["sqlite3","sqlite three","+registry"],
            ["shelve","shelf","+registry"],
            ["bz2","b z two","b z 2","be set to","busy too","busy to"],
            ["filecmp","file compare","+registry"],
            ["fnmatch","function match","+registry"],
            ["gzip","g zip","+registry"],
            ["tarfile","tar file","tar files"],
            ["tempfile","temp file","temp files"],
            ["zipfile","zip file","zip files"],
            ["zlib","z lib","that sleep","z sleep","zeeland"],
            ["commands","Commands","+registry"],
            ["configparser","configuration parser","+registry"],
            ["errno","error number","your number"],
            ["fcntl","file control","while control"],
            ["io","i o","+registry"],
            ["logging","Logging","+registry"],
            ["mmap","memory mapping","memory metal","memory match"],
            ["msvcrt","microsoft runtime","+registry"],
            ["optparse","option parse","option pass","austin carr"],
            ["signal","Signal","+registry"],
            ["winreg","windows registry","+registry"],
            ["multiprocessing","multi-processing","+registry"],
            ["threading","trade inc","threaten","shredding"],
            ["queue","Queue","+registry"],
            ["asynchat","asynchronous chat","asynchronous shirt"],
            ["asyncore","asynchronous core","a synchronous or","asynchronous score","asynchronous corey","asynchronous query"],
            ["select","Select","+registry"],
            ["socket","sockets","+registry"],
            ["ssl","secure socket layer","secure sockets layer"],
            ["SocketServer","socket server","+registry"],
            ["ftplib","ftp library","icp library","lcp library"],
            ["http","HTTP","+registry"],
            ["smtplib","smtp library","smpp library"],
            ["urllib","url library","you are a library"],
            ["xmlrpc","xml remote procedure calls","xml remote procedure call"],
            ["cgi","c g i","c o g i","c v i","c d i"],
            ["cgitb","cgi t b","cgi tv","c g i t b","c t i t b","c c i t"],
            ["wsgiref","wsgi reference","w s g i reference","w s g reference"],
            ["flask","flesk","+registry"],
            ["django","jungle","junker"],
            ["django","Django","+registry"],
            ["gunicorn","g unicorn","the unicorn"],
            ["base64","day 64","+registry"],
            ["binascii","bin aski","bin ascii","SQ","benassi"],
            ["csv","c s v","c s we","cs we"],
            ["email","mary","+registry"],
            ["hashlib","crash library","hash library","crash sleep","hash sleep","has library"],
            ["hmac","h mac","h mark","smack","it smack","h maggie"],
            ["HTMLParser","html parser","+registry"],
            ["mimetypes","mime types","mineplex","minds heights","mind heights"],
            ["quopri","q prime","quo prime","core prime","coupon"],
            ["xml","accident","flexinail"],
            ["ctypes","sea types","c types","seaside","c-type","seat height"]
        ]
        super().__init__()
    
    # Проверка синтаксиса, где
    # fileName  (str) - имя файла
    # fileContent  (str) - содержимое файла
    # start (int) - начало проверяемого участка
    # end   (int) - конец проверяемого участка
    # Возвращает
    # list со списком ошибок
    def checkSyntax(self, fileName, fileContent, start, end):
        return self.syntaxChecker.checkSyntax(fileName, fileContent, start, end)

    # Получение автодополнений, где
    # con - соединение
    # tokens (list) - список лексем
    # content (str) - содержимое файла
    # line (int) - строка
    # position (int) - позиция в строке
    # chatId (str) - ID чата
    # branchId (str) -  ID ветки
    def getAutocompletions(self, con, tokens, content, line, position, chatId, branchId):
        return self.autocompleter.getAutocompletions(con, tokens, content, line, position, chatId, branchId)
